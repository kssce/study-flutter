/*
Flutter 의 제스처 시스템에는 두 개의 개별 레이어가 있습니다.
첫 번째 레이어에는 화면에서 포인터(예: 터치, 마우스 및 스타일러스)의
위치와 이동을 설명하는 원시 포인터 이벤트가 있습니다.
두 번째 레이어에는 하나 이상의 포인터 움직임으로 구성된 의미론적 동작을 설명하는 제스처 가 있습니다 .

[ 포인터 ]
포인터는 장치 화면과의 사용자 상호 작용에 대한 원시 데이터를 나타냅니다.
포인터 이벤트에는 네 가지 유형이 있습니다

PointerDownEvent: 포인터가 특정 위치의 화면에 닿음
PointerMoveEvent: 포인터가 한 위치에서 다른 위치로 이동
PointerUpEvent: 포인터가 화면 접촉을 멈춤
PointerCancelEvent: 이 포인터의 입력은 더이상 앱을 향하지 않음

포인터를 내리면 프레임워크는 앱에서 hit test(적중 테스트)를 수행하여
포인터가 화면에 닿은 위치에 어떤 위젯이 있는지 확인합니다.
포인터 다운 이벤트(및 해당 포인터에 대한 후속 이벤트)는 적중 테스트에서 찾은
가장 안쪽 위젯으로 전달됩니다.
거기에서 이벤트는 트리를 버블링하고 가장 안쪽 위젯에서
트리 루트까지의 경로에 있는 모든 위젯으로 전달됩니다.
포인터 이벤트가 더 이상 전달되지 않도록 취소하거나 중지하는 메커니즘은 없습니다.

위젯 레이어에서 직접 포인터 이벤트를 수신하려면 Listener 위젯을 사용하십시오.
그러나 보통 제스처(아래 설명 참조)를 사용하는 것이 좋습니다.

[ 제스처 ]
제스처는 여러 개별 포인터 이벤트, 잠재적으로 여러 개별 포인터에서 인식되는
의미론적 동작(예: 탭, 끌기 및 크기 조정)을 나타냅니다.
제스처는 제스처의 수명 주기에 따라 여러 이벤트를 전달할 수 있습니다.
(예: 드래그 시작, 드래그 업데이트 및 드래그 종료)

- Tap
onTapDown: 화면에 닿음
onTapUp: 화면 접촉 중지함
onTap: 이전에 트리거한 포인터 onTapDown 가 트리거 onTapUp 이 되어 탭이 발생
onTapCancel: 이전에 트리거한 포인터 onTapDown 은 탭(onTap?)을 유발하지 않을 것이다.

- Double tap
onDoubleTap: 같은 위치 두 번 연속 탭

- Long press
onLongPress: 오랫동안 포인터가 같은 위치에서 화면에 접촉되어 있음

- Vertical drag
onVerticalDragStart: 포인터가 화면에 닿았고 수직으로 움직이기 시작할 수 있음
onVerticalDragUpdate: 화면에 닿아 세로로 움직이는 포인터가 세로로 움직임
onVerticalDragEnd: 이전에 화면에 접촉하고 수직으로 이동하던 포인터가 더이상 화면에 접촉하지 않고 접촉을 멈춤

- Horizontal drag
onHorizontalDragStart: 포인터가 화면에 닿았고 수평으로 움직이기 시작할 수 있음
onHorizontalDragUpdate: 화면에 닿아 가로로 움직이는 포인터가 가로로 움직임
onHorizontalDragEnd: 이전에 화면에 접촉하고 수평으로 이동하던 포인터가 더이상 화면에 접촉하지 않고 접촉을 멈춤

- Pan
onPanStart: 포인터가 화면에 닿았고 가로 또는 세로로 움직이기 시작할 수 있음
(이 콜백은 onHorizontalDragStart 또는 onVerticalDragStart 가 설정된 경우
충돌을 일으킴)
onPanUpdate: 화면에 닿아서 세로 또는 가로 방향으로 움직이는 포인터
(이 콜백도 -Horizontal-Update, -Vertical-Update 가 설정된 경우 충돌)
onPanEnd: 이전에 화면에 접촉했던 포인터는 더 이상 화면과 접촉하지 않고 화면 접촉을 멈춤
(이 콜백도 -Horizontal-End, -Vertical-End 가 설정된 경우 충돌)

[ 위젯에 제스처 감지 추가 ]
위젯 레이어에서 제스처를 구독하려면 GestureDetector 클래스 사용.
머티리얼 컴포넌트를 사용하고 있다면 많은 위젯이 이미 탭이나 제스처에 반응합니다.
예를 들면 IconButton 및 TextButton 은 프레스(탭)에 응답하고
ListView 트리거 스크롤 와이프에 반응합니다.
해당 위젯을 사용하지 않지만 탭할때 눌렀을때 퍼지는 효과 효과를 원하는 경우
InkWell 을 사용할 수 있습니다.

[ 제스처 명확화 ]
화면의 주어진 위치에 여러 GestureDetector(제스처 감지기가) 있을 수 있습니다.
이러한 모든 제스처 감지기는 포인터 이벤트가 지나갈 때 스트림을 수신하고
특정 제스처를 인식하려고 시도합니다.
GestureDetector 위젯은 non-null 인 콜백으로 인식을 시도할 제스처를 결정합니다.

화면의 주어진 포인터에 대해 둘 이상의 제스처 인식기가 있는 경우
프레임워크는 각 인식기가 제스처 영역에 참여하도록 하여
사용자가 의도하는 제스처를 명확하게 합니다.
제스처 영역은 다음 규칙을 사용하여 승리하는 제스처를 결정합니다.

언제든지 인식자는 패배를 선언하고 경기장을 떠날 수 있습니다.
경기장에 인식기가 하나뿐인 경우 해당 인식기가 승자가 됩니다.
언제든지 인식자는 승리를 선언할 수 있으므로 승리하고 나머지 인식자는 모두 지게 됩니다.
예를 들어 수평 및 수직 드래그를 명확하게 할 때 두 인식기는
포인터 다운 이벤트를 수신할 때 경기장에 들어갑니다.
인식기(recognizer)는 포인터 이동 이벤트를 관찰합니다.
사용자가 수평으로 특정 논리적 픽셀 수 이상 포인터를 이동하면
수평 인식기가 승리를 선언하고 제스처가 수평 드래그로 해석됩니다.
마찬가지로 사용자가 수직으로 특정 수의 논리적 픽셀 이상을 이동하면
수직 인식기가 승리를 선언합니다.

제스처 영역(The gesture arena)은 수평(또는 수직) 드래그 인식기만 있는 경우에 유용합니다.
(하나의 인식기만 있는 경우 유용)
이 경우 경기장에 인식기가 하나만 있고 수평 드래그가 즉시 인식됩니다.
즉, 수평 이동의 첫 번째 픽셀을 드래그로 처리할 수 있고
사용자는 추가 제스처 명확화를 기다릴 필요가 없습니다.

 */

import 'package:flutter/material.dart';

class Gesture extends StatelessWidget {
  const Gesture({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
